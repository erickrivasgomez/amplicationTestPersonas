/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePersonaArgs } from "./CreatePersonaArgs";
import { UpdatePersonaArgs } from "./UpdatePersonaArgs";
import { DeletePersonaArgs } from "./DeletePersonaArgs";
import { PersonaFindManyArgs } from "./PersonaFindManyArgs";
import { PersonaFindUniqueArgs } from "./PersonaFindUniqueArgs";
import { Persona } from "./Persona";
import { PersonaService } from "../persona.service";

@graphql.Resolver(() => Persona)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PersonaResolverBase {
  constructor(
    protected readonly service: PersonaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Persona",
    action: "read",
    possession: "any",
  })
  async _personasMeta(
    @graphql.Args() args: PersonaFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Persona])
  @nestAccessControl.UseRoles({
    resource: "Persona",
    action: "read",
    possession: "any",
  })
  async personas(
    @graphql.Args() args: PersonaFindManyArgs
  ): Promise<Persona[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Persona, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Persona",
    action: "read",
    possession: "own",
  })
  async persona(
    @graphql.Args() args: PersonaFindUniqueArgs
  ): Promise<Persona | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Persona)
  @nestAccessControl.UseRoles({
    resource: "Persona",
    action: "create",
    possession: "any",
  })
  async createPersona(
    @graphql.Args() args: CreatePersonaArgs
  ): Promise<Persona> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Persona)
  @nestAccessControl.UseRoles({
    resource: "Persona",
    action: "update",
    possession: "any",
  })
  async updatePersona(
    @graphql.Args() args: UpdatePersonaArgs
  ): Promise<Persona | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Persona)
  @nestAccessControl.UseRoles({
    resource: "Persona",
    action: "delete",
    possession: "any",
  })
  async deletePersona(
    @graphql.Args() args: DeletePersonaArgs
  ): Promise<Persona | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
